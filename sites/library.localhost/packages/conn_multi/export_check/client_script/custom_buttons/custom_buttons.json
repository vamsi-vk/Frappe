{
 "creation": "2024-06-12 15:58:58.835327",
 "docstatus": 0,
 "doctype": "Client Script",
 "dt": "Policy",
 "enabled": 1,
 "idx": 0,
 "modified": "2024-06-12 15:58:58.835327",
 "modified_by": "Administrator",
 "module": "Export Check",
 "name": "Custom Buttons",
 "owner": "Administrator",
 "script": "frappe.ui.form.on('Vehicle Policy Form', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.workflow_state === 'Approved') {\r\n            frm.add_custom_button(__('Quotation'), function() {\r\n                ensureCustomerExistsAndCreateQuotation(frm);\r\n            }, __('Create'));\r\n            \r\n            frm.add_custom_button(__('Sales Invoice'), function() {\r\n                ensureCustomerExistsAndCreateSalesInvoice(frm);\r\n            }, __('Create'));\r\n        } else {\r\n            frm.page.clear_actions_menu();\r\n        }\r\n    },\r\n    onload: function(frm) {\r\n        console.log(frm.doc);\r\n        console.log(\"Form Loaded with status:\", frm.doc.workflow_state);\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Vehicle Inspection',\r\n                filters: {\r\n                    'vehicle_no': frm.doc.registration_no,\r\n                    'workflow_state':\"Confirmed\"\r\n                },\r\n                fields: ['name', 'vehicle_no','workflow_state'],\r\n                limit_page_length: 10 // Optional: limit the number of results\r\n            },\r\n            callback: function(response) {\r\n                if(response.message) {\r\n                    // Handle the response\r\n                    let tasks = response.message;\r\n                    console.log(response.message);\r\n                    console.log('Filtered Tasks:', tasks,frm.doc);\r\n                    if(!tasks.length){\r\n                        if (frm.doc.workflow_state === 'Vehicle Inspection') {\r\n                            doc = frappe.model.get_new_doc('Vehicle Inspection');\r\n                            doc.vehicle_no = frm.doc.registration_no;\r\n                            doc.vehicle_color = frm.doc.vehicle_color;\r\n                            doc.chassis_no = frm.doc.chassis_no;\r\n                            doc.policy_no=frm.doc.name;\r\n                            doc.engine_no = frm.doc.engine_no;\r\n                            frappe.set_route('Form', 'Vehicle Inspection', doc.name);\r\n                        }\r\n                    }\r\n                    // You can update your form or do other actions with the data\r\n                }\r\n            }\r\n        });\r\n    },\r\n    'policy_scheme':function(frm){\r\n        console.log(\"----policy scheme selection----\", frm)\r\n        frappe.db.get_value('Item Price', {'item_code': frm.doc.policy_scheme}, ['price_list_rate']).then((resp)=>{\r\n            frm.set_value('policy_price', resp.message.price_list_rate)\r\n        })\r\n    },\r\n    before_workflow_action: function(frm){\r\n        if(frm.doc.workflow_state === 'Ready For Underwriting' && frm.doc.is_broker_involved === 1){\r\n            let discount=0\r\n            let accountingDetails=frappe.model.get_new_doc('Journal Entry')\r\n            accountingDetails.voucher_type='Journal Entry'\r\n            accountingDetails.posting_date=frappe.datetime.nowdate();\r\n            if(!accountingDetails.accounts){\r\n                accountingDetails.accounts=[]\r\n            }\r\n            if(frm.doc.discount_rate){\r\n                discount= frm.doc.policy_price * frm.doc.discount_rate / 100\r\n            }\r\n            let tax_amount=(frm.doc.policy_price-discount) * frm.doc.tax_rate / 100\r\n            console.log(\"---Policy status updated from Ready For Underwriting\", tax_amount)\r\n            let userPaymentEntries=[{\r\n                account: 'Broker Control A/c - 3FAT',\r\n                debit_in_account_currency: frm.doc.policy_price+tax_amount\r\n            },{\r\n                account: 'Gross Direct Premium - Motor A/c - 3FAT',\r\n                credit_in_account_currency: frm.doc.policy_price\r\n            },{\r\n                account: 'CGST A/c - 3FAT',\r\n                credit_in_account_currency: tax_amount/2\r\n            },{\r\n                account: 'SGST A/c - 3FAT',\r\n                credit_in_account_currency: tax_amount/2\r\n            },{\r\n                account: 'Gross Commission - Motor A/c - 3FAT',\r\n                debit_in_account_currency:  frm.doc.policy_price * frm.doc.commission / 100\r\n            },{\r\n                account: 'Broker Control A/c - 3FAT',\r\n                credit_in_account_currency: frm.doc.policy_price * frm.doc.commission / 100\r\n            }]\r\n            userPaymentEntries.forEach(entry => {\r\n                accountingDetails.accounts.push(entry);\r\n            });\r\n            frappe.db.insert(accountingDetails).then(doc => {\r\n                frappe.show_alert({message: __('Journal Entry Created'), indicator: 'green'});\r\n                frappe.set_route('Form', 'Journal Entry', doc.name);\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\nfunction ensureCustomerExistsAndCreateQuotation(frm) {\r\n    ensureCustomerExists(frm.doc.proposer_full_name, () => {\r\n        createQuotation(frm);\r\n    });\r\n}\r\n\r\nfunction ensureCustomerExistsAndCreateSalesInvoice(frm) {\r\n    ensureCustomerExists(frm.doc.proposer_full_name, () => {\r\n        createSalesInvoice(frm);\r\n    });\r\n}\r\n\r\nfunction ensureCustomerExists(proposerName, callback) {\r\n    console.log(\"---Ensure customer exists=====\", proposerName)\r\n    frappe.db.exists('Customer', proposerName).then(exists => {\r\n        if (!exists) {\r\n            var newCustomer = frappe.model.get_new_doc('Customer');\r\n            newCustomer.customer_name = proposerName;\r\n            newCustomer.customer_type = \"Individual\";\r\n            frappe.db.insert(newCustomer).then(customer => {\r\n                frappe.show_alert({message: __('Customer Created'), indicator: 'green'});\r\n                callback();\r\n            });\r\n        } else {\r\n            callback();\r\n        }\r\n    });\r\n}\r\n\r\nfunction createQuotation(frm) {\r\n    let newQuotation = frappe.model.get_new_doc('Quotation');\r\n    newQuotation.quotation_to = \"Customer\";\r\n    newQuotation.customer = frm.doc.proposer_full_name;\r\n\r\n    if (!newQuotation.items) {\r\n        newQuotation.items = [];\r\n    }\r\n    \r\n    const price = frm.doc.price;\r\n    const quantity = 1;\r\n\r\n    const priceSection = {\r\n        item_code: 'Vehicle Policy',\r\n        qty: quantity,\r\n        rate: price,\r\n        amount: price * quantity\r\n    };\r\n\r\n    newQuotation.items.push(priceSection);\r\n\r\n    frappe.db.insert(newQuotation).then(doc => {\r\n        frappe.show_alert({message: __('Quotation Created'), indicator: 'green'});\r\n        frappe.set_route('Form', 'Quotation', doc.name);\r\n    }).catch(error => {\r\n        console.error('Failed to create Quotation:', error);\r\n        frappe.msgprint(__('Error creating Quotation'));\r\n    });\r\n}\r\n\r\nfunction createSalesInvoice(frm) {\r\n    console.log(\"----------creating sale invoic-e---\", frm.doc)\r\n    let newSaleInvoice = frappe.model.get_new_doc('Sales Invoice');\r\n    newSaleInvoice.customer = frm.doc.proposer_full_name;\r\n    newSaleInvoice.due_date= frappe.datetime.add_days(frappe.datetime.nowdate(), 10)\r\n    newSaleInvoice.custom_policy_number= frm.doc.name\r\n    newSaleInvoice.taxes_and_charges='Broker sale tax template - 3FAT'\r\n\r\n    if (!newSaleInvoice.items) {\r\n        newSaleInvoice.items = [];\r\n    }\r\n\r\n    if (!newSaleInvoice.taxes) {\r\n        newSaleInvoice.taxes = [];\r\n    }\r\n    \r\n    const price = frm.doc.price;\r\n    const quantity = 1;\r\n    const taxRate = frm.doc.tax_rate;\r\n    console.log(\"0------frm----\", frm.doc)\r\n    const priceSection = {\r\n        item_code: frm.doc.policy_scheme,\r\n        qty: quantity,\r\n        rate: frm.doc.premium_rate,\r\n        amount: price * quantity\r\n    };\r\n\r\n    newSaleInvoice.items.push(priceSection);\r\n    \r\n    const taxesSection = {\r\n        charge_type: 'On Net Total',\r\n        account_head: 'OUTPUT GST/ST ACCOUNT - 3FAT',\r\n        rate: taxRate,\r\n        tax_amount: price * taxRate / 100,\r\n        total: price + (price * taxRate / 100),\r\n        description: 'Tax @ ' + taxRate + '% on total'\r\n    };\r\n    newSaleInvoice.taxes.push(taxesSection);\r\n    console.log(\"----Sales invoice before generating----\", newSaleInvoice)\r\n    frappe.db.insert(newSaleInvoice).then(doc => {\r\n        console.log(\"---new doc---\", doc)\r\n        frappe.show_alert({message: __('Sales Invoice Created'), indicator: 'green'});\r\n        frappe.set_route('Form', 'Sales Invoice', doc.name);\r\n    }).catch(error => {\r\n        console.error('Failed to create Sales Invoice:', error);\r\n        frappe.msgprint(__('Error creating Sales Invoice'));\r\n    });\r\n}\r\n",
 "view": "Form"
}